#!/bin/python -u

from RPi import GPIO
from time import sleep
import subprocess
import threading
import os

# Setting up a null device
FNULL = open(os.devnull, 'w')

# Access to userconfig variables
config = {}
with open("/boot/userconfig.txt") as f:
    for line in f:
        try:
            key,value = line.strip().split("=",1)
        except ValueError:
            print("Incorrect line in config: ", line)
        config[key] = value[1:-1]

Enc_A = 0 # Not all aroios have a rotary encoder, so we are disabling it
Enc_B = 0 #   by initializing it with pin 0
LED_Net = 22
Btn_Pause = 0

# Set initial volume to prevent jump upon first usage of rotary encoder
Volume = int(config["VOLUME_START"])
Att = Volume * -1
oldVolume = 0
A_LastState = 0

# Check if platform has a rotary encoder and assign GPIOs
if (str(config["PLATFORM"]) == "AroioLT" or str(config["PLATFORM"]) == "Caroio"):
    Enc_A = 23
    Enc_B = 24
#    LED_net = 22

# Check if platform has a pause-button
if (str(config["PLATFORM"]) == "AroioEX" or str(config["PLATFORM"]) == "AroioLT"):
    Btn_Pause = 27
    print("Platform has pause button")

# Initializing our GPIOs
GPIO.setmode(GPIO.BCM)
GPIO.setup(Enc_A, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(Enc_B, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(Btn_Pause, GPIO.IN)
#GPIO.setup(LED_Net, GPIO.OUT)

# Callback function that decodes our rotary encoder
def rotation_decode(Enc_A):
    global Volume
    global A_LastState

    A_State = GPIO.input(Enc_A)
    B_State = GPIO.input(Enc_B)

    if (str(config["PLATFORM"]) == "Caroio"):
        if A_State != A_LastState:
            if A_State != B_State:
                Volume -= 1
            else:
                Volume += 1
        if Volume > 10:
            Volume = 10
        if Volume < -50:
            Volume = -50
    else:
        if A_State != A_LastState:
            if A_State != B_State:
                Volume -= 3
            else:
                Volume += 3
        if Volume > -1:
            Volume = 0
        if Volume < -80:
            Volume = -80

    A_LastState = A_State

# Callback function that controls our LMS server: pause
def pause_alert(input):
    #print("Button Pause was pushed!")
    pause_press = GPIO.input(Btn_Pause)
    if pause_press:
        print("Button pause pressed, will inform our LMS...")
        subprocess.call(["aroio_control_lms", "pause"])

# Callback function that controls our LED
#def control_led(state):
#    print("Turning LED", state)
#    if str(state) == "on":
#        GPIO.output(LED_net, 1)
#    else:
#        GPIO.output(LED_net, 0)


# Make sure there are no leftovers from previous runs
GPIO.remove_event_detect(Enc_A)
GPIO.remove_event_detect(Enc_B)
# Attach events to our pins
GPIO.add_event_detect(Enc_A, GPIO.BOTH, callback=rotation_decode, bouncetime=2)

# Again take care of leftovers
GPIO.remove_event_detect(Btn_Pause)
# Attach event
GPIO.add_event_detect(Btn_Pause,GPIO.RISING,callback=pause_alert, bouncetime=200)

# Main loop
try:
    while True:
        sleep(0.003)
        if Volume != oldVolume:
            if (str(config["PLATFORM"]) == "Caroio"):
                Att = Volume * -1
            else:
                AlsaVolume = Volume * 3.1875 + 255
            print("New jackmixer volume: ",Volume)
            print("New BruteFIR attenuation: ",Att)
            threading.Thread(target=lambda ctr: subprocess.call(["volumecontrol", str(ctr)], stdout=FNULL, stderr=subprocess.STDOUT), args=(Volume,)).start()
            if (str(config["PLATFORM"]) == "Caroio"):
                threading.Thread(target=lambda ctr: subprocess.call(["caroio_volume", str(ctr)], stdout=FNULL, stderr=subprocess.STDOUT), args=(Att,)).start()
            else:
                threading.Thread(target=lambda ctr: subprocess.call(["amixer", "sset", "'Master'", str(ctr)], stdout=FNULL, stderr=subprocess.STDOUT), args=(AlsaVolume,)).start()
            oldVolume = Volume
            f = open("/tmp/volume", "w")
            f.write(str(Volume))

# Try to exit clean
except KeyboardInterrupt:
    GPIO.remove_event_detect(Enc_A)
    GPIO.remove_event_detect(Enc_B)
    GPIO.remove_event_detect(Btn_Pause)
    GPIO.cleanup()
