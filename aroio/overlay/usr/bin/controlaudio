#!/bin/sh

. /boot/userconfig.txt

[ "$PLATFORM" = "Caroio" ] && echo "Platform Caroio detected, holding back until USB soundcard becomes active..." && until [ -e /proc/asound/card1 ] ; do sleep 0.1 ; done

ACTION="$1"
[ -e /tmp/measurement ] && AUDIO_OUTPUT=$MEASUREMENT_OUTPUT

echo "Controlaudio "$ACTION" ..."
echo "Checking if unpacking of FIR filters is done..."
until [ -e /run/filters_ready ] ; do sleep 0.2 ; done
echo "FIR filters found, continuing! ..."

[ "$SOUNDCARD" = "Internal HDMI audio" ] && amixer cset numid=3 2
[ "$SOUNDCARD" = "Internal audio jack" ] && amixer cset numid=3 1

function Start()
{
	sed -i "/#SAMPLINGRATE/c\        rate "$RATE" #SAMPLINGRATE" /etc/asound.conf
	sed -i "/defaults.pcm.rate_converter/c\defaults.pcm.rate_converter \"$RESAMPLING\"" /etc/asound.conf
	sed -i "/output_rate/c\output_rate = "$SPRATE""  /etc/shairport-sync.conf
	sed -i "/buffer_size/c\buffer_size = "$SP_OUTBUFFER""  /etc/shairport-sync.conf
  #	sed -i "/period_size/c\period_size = "$SP_PERIOD""  /etc/shairport-sync.conf

	case "$AUDIO_OUTPUT" in
		vol-plug)
			case "$RAW_PLAYER" in
				squeezelite)
					systemctl "$ACTION" squeezelite.service
				;;

				gmediarender)
					systemctl "$ACTION" gmediarender.service
				;;

				shairportsync)
					systemctl "$ACTION" shairport-sync.service
				;;

				bluealsaaplay)
					[ -e /sys/class/bluetooth/hci0 ] && systemctl "$ACTION" bluealsa-aplay.service
				;;
			esac
		;;

		vol-plug-ms)
			case "$RAW_PLAYERMS" in
				squeezelite)
					systemctl "$ACTION" squeezelite.service
				;;

				gmediarender)
					systemctl "$ACTION" gmediarender.service
				;;

				shairportsync)
					systemctl "$ACTION" shairport-sync.service
				;;

				bluealsaaplay)
					[ -e /sys/class/bluetooth/hci0 ] && systemctl "$ACTION" bluealsa-aplay.service
				;;
			esac
		;;

		vol-plug-dmix)
			[ "$DMIX_SQUEEZELITE"   = "ON" ] && systemctl "$ACTION" squeezelite.service
			[ "$DMIX_GMEDIARENDER"  = "ON" ] && systemctl "$ACTION" gmediarender.service
			[ "$DMIX_SHAIRPORTSYNC" = "ON" ] && systemctl "$ACTION" shairport-sync.service
			[[ "$DMIX_BLUEALSAAPLAY" = "ON" && -e /sys/class/bluetooth/hci0 ]] && systemctl "$ACTION" bluealsa-aplay.service
		;;

		vol-plug-dmix-ms)
			[ "$DMIXMS_SQUEEZELITE"   = "ON" ] && systemctl "$ACTION" squeezelite.service
			[ "$DMIXMS_GMEDIARENDER"  = "ON" ] && systemctl "$ACTION" gmediarender.service
			[ "$DMIXMS_SHAIRPORTSYNC" = "ON" ] && systemctl "$ACTION" shairport-sync.service
			[[ "$DMIXMS_BLUEALSAAPLAY" = "ON" && -e /sys/class/bluetooth/hci0 ]] && systemctl "$ACTION" bluealsa-aplay.service
		;;

		jack)
			systemctl "$ACTION" jackd.service
			echo "Waiting for jack daemon to start up..."
      	jack_wait -w -t1 &> /dev/null && echo "jack daemon started" || echo "jack daemon failed to start"
			sleep 1
			[[ "$JACK_NETJACK"      = "ON"  && "$ACTION" != "stop" ]] && echo "netmanager start" && jack_load netmanager && connect_netjackports
			[ "$JACK_SQUEEZELITE"   = "ON" ] && systemctl "$ACTION" squeezelite.service
			[ "$JACK_GMEDIARENDER"  = "ON" ] && systemctl "$ACTION" gmediarender.service
			[ "$JACK_SHAIRPORTSYNC" = "ON" ] && systemctl "$ACTION" shairport-sync.service
			[[ "$JACK_BLUEALSAAPLAY" = "ON" && -e /sys/class/bluetooth/hci0 ]] && systemctl "$ACTION" bluealsa-aplay.service
			[ "$JACK_INPUT" = "ON" ] && sleep 0.2 && jack_connect system:capture_1 jackmixer:in1_left && jack_connect system:capture_2 jackmixer:in1_right
		;;

		jack-ms)
			systemctl "$ACTION" jackd.service
			echo "Waiting for jack daemon to start up..."
      	jack_wait -w -t1 &> /dev/null && echo "jack daemon started" || echo "jack daemon failed to start"
			[[ "$JACKMS_NETJACK"      = "ON"  && "$ACTION" != "stop" ]] &&  jack_load netmanager && connect_netjackports
			[ "$JACKMS_SQUEEZELITE"   = "ON" ] && systemctl "$ACTION" squeezelite.service
			[ "$JACKMS_GMEDIARENDER"  = "ON" ] && systemctl "$ACTION" gmediarender.service
			[ "$JACKMS_SHAIRPORTSYNC" = "ON" ] && systemctl "$ACTION" shairport-sync.service
			[[ "$JACKMS_BLUEALSAAPLAY" = "ON" && -e /sys/class/bluetooth/hci0 ]] && systemctl "$ACTION" bluealsa-aplay.service
			[ "$JACKMS_INPUT" = "ON" ] && sleep 0.2 && jack_connect system:capture_1 jackmixer:in1_left && jack_connect system:capture_2 jackmixer:in1_right
		;;

		jack-bf)
			systemctl "$ACTION" jackd.service
			echo "Waiting for jack daemon to start up..."
      	jack_wait -w -t1 &> /dev/null && echo "jack daemon started" || echo "jack daemon failed to start"
			systemctl "$ACTION" brutefir.service
			echo "Waiting for brutefir to start up..."
			until jack_lsp | grep brutefir &> /dev/null ; do sleep 0.2 ; done && echo "brutefir started"
			[[ "$JACKBF_NETJACK"      = "ON"  && "$ACTION" != "stop" ]] && jack_load netmanager && connect_netjackports
			[ "$JACKBF_SQUEEZELITE"   = "ON" ] && systemctl "$ACTION" squeezelite.service
			[ "$JACKBF_GMEDIARENDER"  = "ON" ] && systemctl "$ACTION" gmediarender.service
			[ "$JACKBF_SHAIRPORTSYNC" = "ON" ] && systemctl "$ACTION" shairport-sync.service
			[[ "$JACKBF_BLUEALSAAPLAY" = "ON" && -e /sys/class/bluetooth/hci0 ]] && systemctl "$ACTION" bluealsa-aplay.service
			[[ "$JACKBF_INPUT" = "ON" || "$PLATFORM" = "Caroio" ]] && sleep 0.2 && jack_connect system:capture_1 brutefir:input-0 \
				&& jack_connect system:capture_2 brutefir:input-1 && caroio_volume $(( $(cat /tmp/volume) * -1 ))
		;;

		jack-bfms)
			systemctl "$ACTION" jackd.service
			echo "Waiting for jack daemon to be started..."
      	jack_wait -w -t1 &> /dev/null && echo "jack daemon started" || echo "jack daemon failed to start"
			systemctl "$ACTION" brutefir.service
			until jack_lsp | grep brutefir &> /dev/null ; do sleep 0.2 ; done && echo "brutefir started"
			[[ "$JACKBFMS_NETJACK"      = "ON"  && "$ACTION" != "stop" ]] && jack_load netmanager && connect_netjackports
			[ "$JACKBFMS_SQUEEZELITE"   = "ON" ] && systemctl "$ACTION" squeezelite.service
			[ "$JACKBFMS_GMEDIARENDER"  = "ON" ] && systemctl "$ACTION" gmediarender.service
			[ "$JACKBFMS_SHAIRPORTSYNC" = "ON" ] && systemctl "$ACTION" shairport-sync.service
			[[ "$JACKBF_BLUEALSAAPLAY" = "ON" && -e /sys/class/bluetooth/hci0 ]] && systemctl "$ACTION" bluealsa-aplay.service
			[ "$JACKBFMS_INPUT" = "ON" ] && jack_connect system:capture_1 brutefir:input-0 && jack_connect system:capture_2 brutefir:input-1
		;;
	esac
}

function StopStatus()
{
	[ "$1" = "stop" ] && volumecontrol -120 && sleep 0.5 && killall jack_persistent_client
	for SERVICE in squeezelite gmediarender shairport-sync bluealsa-aplay brutefir jackd
	do
		systemctl "$1" "$SERVICE".service
	done
}

function Brutefir()
{
	for SERVICE in squeezelite gmediarender shairport-sync bluealsa-aplay
	do
		systemctl stop "$SERVICE".service
	done
	systemctl start jackd.service
	until jack_lsp | grep jackmixer ; do sleep 0.1 ; done
	systemctl start brutefir.service
	until jack_lsp | grep brutefir ; do sleep 0.2 ; done
	[ "$PLATFORM" = "Caroio" ] && caroio_volume $(( $(cat /tmp/volume) * -1 ) ))
}

function Jack()
{
	for SERVICE in squeezelite gmediarender shairport-sync bluealsa-aplay
	do
		systemctl stop "$SERVICE".service
	done
	systemctl start jackd.service
	until jack_lsp | grep jackmixer ; do sleep 0.1 ; done
}

case "$ACTION" in
	stop|status)
	StopStatus "$ACTION"
	;;

	start)
	Start
	;;

	restart)
	StopStatus stop
	Start
	;;

	brutefir)
	Brutefir
	;;

	jack)
	Jack
	;;
esac

exit 0
