# Some needed defaults
pcm.!default {
    type plug
    slave { pcm "dmixer" }
}

defaults.bluealsa.service "org.bluealsa"
defaults.bluealsa.interface "hci0"
defaults.bluealsa.device "00:00:00:00:00:00"
defaults.bluealsa.profile "a2dp"
defaults.bluealsa.delay 10000

defaults.pcm.rate_converter "speexrate_medium"

######################################################################################
# First soundcard with no conversions
pcm.raw {
    type hw
    hint { show on
           description "Raw PCM Output to soundcard"
    }
    card 0
}

######################################################################################
# First soundcard with conversions and dual software volume control
pcm.vol-plug {
    type softvol
    hint { show on
           description
"- software volume control
- automatic conversion of bitdepth
- automatic conversion of sample-format
- automatic samplerate-conversion"
    }
    slave.pcm "prevol-vol-plug"
    control.name "Master"
    control.card 0
}

pcm.prevol-vol-plug {
    type softvol
    slave.pcm "plughw:0"
    control.name "Premaster"
    control.card 0
}

######################################################################################
# First soundcard with conversions, dual software volume control and MS-coding
pcm.vol-plug-ms {
    type softvol
    hint { show on
           description
"- MS-coded
- software volume control
- automatic conversion of bitdepth
- automatic conversion of sample-format
- automatic samplerate-conversion"
    }
    slave.pcm "prevol-vol-plug-ms"
    control.name "Master"
    control.card 0
}

pcm.prevol-vol-plug-ms {
    type softvol
    slave.pcm "plug-mscoded"
    control.name "Premaster"
    control.card 0
}

######################################################################################
# First soundcard with conversions, dual software volume control and multi-inputs
pcm.vol-plug-dmix {
    type softvol
    hint { show on
           description
"- software volume control
- automatic conversion of bitdepth
- automatic conversion of sample-format
- automatic samplerate-conversion
- multiple players possible"
    }
    slave.pcm "prevol-vol-plug-dmix"
    control.name "Master"
    control.card 0
}

pcm.prevol-vol-plug-dmix {
	type softvol
	slave.pcm "plug-dmixer"
	control.name "Premaster"
	control.card 0
}

# dmixer conversion
pcm.plug-dmixer {
    type plug
    slave { pcm "dmixer" }
}

# dmixer conversion slave
pcm.dmixer  {
    type dmix
    ipc_key 1024
    slave {
        pcm "hw:0"
        #period_time 0
        #period_size 1024
        #buffer_size 4096
        format S32_LE
        rate 192000 #SAMPLINGRATE
    }
    bindings {
        0 0
        1 1
    }
}

# dmixer ctl
ctl.dmixer {
    type hw
    card 0
}
######################################################################################
# First soundcard with conversions, dual software volume control, multi-inputs and MS-coding
pcm.vol-plug-dmix-ms {
    type softvol
    hint { show on
           description
"- MS-coded
- software volume control
- automatic conversion of bitdepth
- automatic conversion of sample-format
- automatic samplerate-conversion
- multiple players possible"
    }
    slave.pcm "prevol-vol-plug-dmix-ms"
    control.name "Master"
    control.card 0
}

pcm.prevol-vol-plug-dmix-ms {
    type softvol
    slave.pcm "plug-mscoded"
    control.name "Premaster"
    control.card 0
}

# LADSPA MS-coding
pcm.plug-mscoded {
    type plug
    slave.pcm "mscoded-plug";
}

# LADSPA MS-coding slave
pcm.mscoded-plug {
    type ladspa
    slave.pcm "plughw:0";
    path "/usr/lib/ladspa";
    plugins [{
	label matrixStMS
        input {
            controls [  ]
        }
    }]
}

######################################################################################
# jack output with conversions and multi-inputs
pcm.jack {
    type plug
    hint {
    description
"- Jack Audio Bridge
- automatic conversion of bitdepth
- automatic conversion of sample-format
- automatic samplerate-conversion
- multiple players possible"
    }
    slave.pcm "rawjack"
}

# jack output to jackmixer
pcm.rawjack {
    type jack
    playback_ports {
        0 jackmixer:in1_left
        1 jackmixer:in1_right
    }
    capture_ports {
        0 system:capture_1
        1 system:capture_2
    }
}

######################################################################################
# jack output with conversions, multi-inputs and MS-coding
pcm.jack-ms {
    type plug
    hint {
    description
"- Jack Audio Bridge
- MS-coded
- automatic conversion of bitdepth
- automatic conversion of sample-format
- automatic samplerate-conversion
- multiple players possible"
    }
    slave.pcm "mscoded-plug-rawjack"
}

pcm.plug-rawjack-ms {
    type plug
    slave { pcm "mscoded-plug-rawjack" }
}

# LADSPA MS-coding slave
pcm.mscoded-plug-rawjack {
    type ladspa
    slave.pcm "rawjack";
    path "/usr/lib/ladspa";
    plugins [{
    label matrixStMS
        input {
            controls [  ]
        }
    }]
}

######################################################################################
# jack output to brutefir with conversions and multi-inputs
pcm.jack-bf {
    type plug
    hint {
    description
"- Jack Audio Bridge into BruteFIR
- automatic conversion of bitdepth
- automatic conversion of sample-format
- automatic samplerate-conversion
- multiple players possible"
    }
    slave.pcm "plug-rawjack-bf"
}

pcm.plug-rawjack-bf {
    type plug
    slave { pcm "rawjack-bf" }
}

# jack output to brutefir slave
pcm.rawjack-bf {
    type jack
    playback_ports {
        0 brutefir:input-0
        1 brutefir:input-1
    }
    capture_ports {
        0 system:capture_1
        1 system:capture_2
    }
}

######################################################################################
# jack output to brutefir with conversions, multi-inputs and MS-coding
pcm.jack-bfms {
    type plug
    hint {
    description
"- Jack Audio Bridge into BruteFIR
- MS-coded
- automatic conversion of bitdepth
- automatic conversion of sample-format
- automatic samplerate-conversion
- multiple players possible"
	}

    slave.pcm "plug-rawjack-bf"
}

######################################################################################
# M-Audio Fast Track Pro Device 0,1 und 0,2 as one 4 Channel Device
pcm.ftp4ch {
    type multi;
    slaves.a.pcm "hw:0,0";
    slaves.a.channels 2;
    slaves.b.pcm "hw:0,1";
    slaves.b.channels 2;

    bindings.0.slave a;
    bindings.0.channel 0;
    bindings.1.slave a;
    bindings.1.channel 1;
    bindings.2.slave b;
    bindings.2.channel 0;
    bindings.3.slave b;
    bindings.3.channel 1;
}

######################################################################################
# Native Instruments Audio 8 DJ
pcm.na8dj {
    type multi
    slaves.a { pcm "hw:Audio8DJ,0,0"; channels 2 }
    slaves.b { pcm "hw:Audio8DJ,0,1"; channels 2 }
    slaves.c { pcm "hw:Audio8DJ,0,2"; channels 2 }
    slaves.d { pcm "hw:Audio8DJ,0,3"; channels 2 }

    bindings.0 { slave a; channel 0 }
    bindings.1 { slave a; channel 1 }
    bindings.2 { slave b; channel 0 }
    bindings.3 { slave b; channel 1 }
    bindings.4 { slave c; channel 0 }
    bindings.5 { slave c; channel 1 }
    bindings.6 { slave d; channel 0 }
    bindings.7 { slave d; channel 1 }
}

ctl.na8dj {
    type hw
    card 0
}
